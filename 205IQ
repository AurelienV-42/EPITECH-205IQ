#!/usr/bin/env python3

import argparse
import sys
import math

def helpFlag():
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print("USAGE")
        print("\t./205IQ u s [IQ1] [IQ2]")
        print("\nDESCRIPTION")
        print("\tu\tmean")
        print("\ts\tstandard deviation")
        print("\tIQ1\tminimum IQ")
        print("\tIQ2\tmaximum IQ")
        sys.exit(0)

def parse_args():
    try:
        parser = argparse.ArgumentParser(description='205IQ', usage=helpFlag())
        parser.add_argument("u", type=float)
        parser.add_argument("s", type=float)
        parser.add_argument("min_iq", type=float, nargs='?', default=-1)
        parser.add_argument("max_iq", type=float, nargs='?', default=-1)
        args = parser.parse_args()
        return args
    except:
        sys.exit(84)

density_function = lambda mean, std_deviation, x : (1 / (float(std_deviation) * math.sqrt(2 * math.pi))) * math.exp(-0.5 * pow((float(mean) - float(x)) / float(std_deviation), 2))

def calcul_density_function(mean, std_deviation):
    array = []
    for x in range(0, 201):
        array += [[x, density_function(mean, std_deviation, x)], ]
    return array

def main():
    args = parse_args()
    mean = args.u
    std_deviation = args.s
    min_iq = int(args.min_iq)
    max_iq = int(args.max_iq)

    if (mean < 0 or mean > 200 or std_deviation <= 0 or std_deviation > 200 or
            min_iq < -1 or min_iq > 200 or max_iq < -1 or max_iq > 200):
        sys.exit(84)
    else:
        array = calcul_density_function(mean, std_deviation)
    if min_iq == -1:
        for x in range(0, 201):
            print(array[x][0], "%.5f" % array[x][1])
    elif max_iq == -1:
        idx = 0.0
        res = 0.0
        while (idx < min_iq):
            res = res + (1 / (float(std_deviation) * math.sqrt(2 * math.pi))) * math.exp(-0.5 * pow((float(mean) - float(idx)) / float(std_deviation), 2))
            idx = idx + 0.01
        print("%.1f" % res, "% of people have an IQ inferior to ", min_iq, sep="")
    else:
        res = 0.0
        idx = min_iq * 1.0
        while (idx < max_iq):
            res = res + (1 / (float(std_deviation) * math.sqrt(2 * math.pi))) * math.exp(-0.5 * pow((float(mean) - float(idx)) / float(std_deviation), 2))
            idx = idx + 0.01
        print("%.1f" % res, "% of people have an IQ between ", min_iq, " and ", max_iq, sep="")

main()
